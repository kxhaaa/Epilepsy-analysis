%author£º Xianghan Kong; All rights reserved.
function varargout = program_export(varargin)
% PROGRAM_EXPORT MATLAB code for program_export.fig
%      PROGRAM_EXPORT, by itself, creates a new PROGRAM_EXPORT or raises the existing
%      singleton*.
%
%      H = PROGRAM_EXPORT returns the handle to a new PROGRAM_EXPORT or the handle to
%      the existing singleton*.
%
%      PROGRAM_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PROGRAM_EXPORT.M with the given input arguments.
%
%      PROGRAM_EXPORT('Property','Value',...) creates a new PROGRAM_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before program_export_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to program_export_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help program_export

% Last Modified by GUIDE v2.5 14-Apr-2020 16:10:55

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @program_export_OpeningFcn, ...
                   'gui_OutputFcn',  @program_export_OutputFcn, ...
                   'gui_LayoutFcn',  @program_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before program_export is made visible.
function program_export_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to program_export (see VARARGIN)

% Choose default command line output for program_export
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes program_export wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = program_export_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, v1, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
fprintf('Please select a basic image.\n');
[file1,rep1]=uigetfile(['*.*']);%select file 
v1=imread([rep1,file1]);
imshow(v1);
colormap gray

fprintf('Please select a image to be analysed.\n');
[file2,rep2]=uigetfile(['*.*']);%select file 
v2=imread([rep2,file2]);
imshow(v2);
colormap gray

fprintf('Registration starts, please wait for a second.\n');
[optimizer, metric] = imregconfig('multimodal');
   optimizer.InitialRadius = 0.005;
   optimizer.Epsilon = 1.5e-4;
   optimizer.GrowthFactor = 1.01;
   optimizer.MaximumIterations = 3000;
movingRegistered = imregister(v2, v1, 'affine', optimizer, metric);
imshow(movingRegistered);
colormap jet
fprintf('Registration has been finished.\n');

fprintf('Calculation starts, please wait for a second.\n');
movingRegistered=sqrt(1./double(movingRegistered));
v1=sqrt(1./double(v1));
sub1=double(movingRegistered)-double(v1);
% imshow(uint16(k));
result=-sub1./double(v1);
save ('result.mat', 'result');
pixel=input('Please input the range of index:\n');
figure
imshow(result);
colormap jet
caxis([-pixel, pixel])
colorbar
fprintf('This program has been finished.\nHave a nice day!\n');


% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
fprintf('Please select a EEG data.\n');
[file,rep]=uigetfile(['*.*']);%select file 
[data, timestamps, info] = load_open_ephys_data([rep,file]);
figure
plot(data);
title('raw data');

disp('Please select a start point and an end point in the chart.(the suggested length is about 10w.)');
[x,y] = ginput(2);
c=floor(x(1));
d=floor(x(2));
data1=data(c:d);
timestamps1=timestamps(c:d);

fs=input('Please input the sampling frequency.\n(Notice fs>2*fN. Example:If the fN is 10kHz, fs is suggested to be 30kHz.)\n');
y=fft(data1);
figure
n = length(data1);          % number of samples
f = (0:n-1)*(fs/n);     % frequency range
power = abs(y).^2/n;    % power of the DFT
plot(f,log(power));
xlabel('Frequency/Hz');
ylabel('Power/dB');
title('Power Spectrum');
xlim([0,200]);

figure
pspectrum(data1,timestamps1,'persistence')
title('persistence spectrum (short-time fourier)');
xlim([0,0.5]);

figure
pspectrum(data1,timestamps1,'power')
title('power spectrum (short-time fourier)');
xlim([0,0.5]);

figure
pspectrum(data1,timestamps1,'spectrogram','Reassign',true)
title('instantaneous frequency (short-time fourier)');
ylim([0 0.5]);
fprintf('This program has been finished.\nHave a nice day!\n');


% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
fprintf('Please select a EEG data.\n');
[file,rep]=uigetfile(['*.*']);%select file 
[data, timestamps, info] = load_open_ephys_data([rep,file]);

prompt = {'Please enter start point:','Please enter end point:'};
dlgtitle = 'Input';
dims = [1 35];
definput = {'1','100000'};
answer = inputdlg(prompt,dlgtitle,dims,definput);
a=str2num(answer{1});
b=str2num(answer{2});

exm_data=data(a:b);
plot(exm_data);
z = fmdemod(exm_data,1/600,1000,100);
figure
subplot(2,1,1);
plot(z); title('raw signal');

[C,L] = wavedec(z,6,'coif1'); 
[sigden,coefs] = cmddenoise(z,'coif1',6);
detl1 = wrcoef('d',coefs,L,'coif1',6); %1-D detail coefficients
subplot(2,1,2);
plot(detl1); title('Thresholded Wavelet Coefficients - Level 6');

prompt1 = {'Please set the type of signal. 0 for interictal spike, 1 for fast ripple. '};
dlgtitle = 'Input';
dims = [1 35];
answer1 = inputdlg(prompt1,dlgtitle,dims);
str=str2num(answer1{1});

if str==0
    fil_data=lowpass(z,2,3000);
    figure;
    subplot(3,1,1)
    plot(fil_data);
    title('Please choose the baseline data in the chart (2Hz Frequency data)')
    
    %baseline
    disp('Please select a start point and an end point of the baseline data in the chart.');
    [x,y] = ginput(2);
    k=sort(floor(x));
    c=k(1);
    d=k(2);
    m=fil_data(c:d);
    basic_time=timestamps(c:d);
    
    subplot(3,1,2)
    plot(m);
    title('baseline data')
    subplot(3,1,3)
    pspectrum(m);
    baseline=std(m);
    
    prompt = {'Please input the coefficient of baseline','Please input the coefficient of the spike distance'};
    dlgtitle = 'Input';
    dims = [1 35];
    definput = {'1','100'};
    ans = inputdlg(prompt,dlgtitle,dims,definput);
    k=str2num(ans{1});
    dis=str2num(ans{2});

    figure
    plot(fil_data);
    title('Please choose the experiment data in the chart')
    disp('Please select a start point and an end point of the experiment data in the chart.');
    [m,n] = ginput(2);
    k1=sort(floor(m));
    e=k1(1);
    f=k1(2);
    w=fil_data(e:f);
    part_time=timestamps(e:f);
    figure
    plot(w);
    title('Time domain 2Hz frequency data')
    
    wav_data=detl1(e:f);
    figure
    findpeaks(wav_data,'MinPeakDistance',dis,'MinPeakHeight',3*k*baseline);
    title('Wavelet domain interictal spike data selecting ')
    fprintf('Please check the corresponding point in both time and wavelet domain.\n');
    [pks,locs] = findpeaks(wav_data,'MinPeakDistance',dis,'MinPeakHeight',3*k*baseline);
    
    fprintf('The spike number is %d.\n',length(pks));
    
    figure
    pspectrum(w,'spectrogram');
    colormap jet;
    ylim([0 0.3]);
    caxis([-60 -25]);

end

if str==1
    fil_data=bandpass(z,[250 500],3000);
    figure;
    subplot(3,1,1)
    plot(fil_data);
    title('250~500Hz Frequency data (Please choose the baseline data in the chart)')
    
    disp('Please select a start point and an end point of the baseline data in the chart.');
    [x,y] = ginput(2);
    k=sort(floor(x));
    c=k(1);
    d=k(2);
    m=fil_data(c:d);
    basic_time=timestamps(c:d);
    
    subplot(3,1,2)
    plot(m);
    title('baseline data')
    subplot(3,1,3)
    pspectrum(m);
    baseline=std(m);
    
    prompt = {'Please input the coefficient of baseline','Please input the coefficient of the spike distance'};
    dlgtitle = 'Input';
    dims = [1 35];
    definput = {'1','100'};
    ans = inputdlg(prompt,dlgtitle,dims,definput);
    k=str2num(ans{1});
    dis=str2num(ans{2});
    
    figure
    plot(fil_data);
    title('Please choose the experiment data in the chart')
    disp('Please select a start point and an end point of the experiment data in the chart.');
    [m,n] = ginput(2);
    k1=sort(floor(m));
    e=k1(1);
    f=k1(2);
    w=fil_data(e:f);
    part_time=timestamps(e:f);
    figure
    plot(w);
    title('Time domain 250~500Hz frequency data')
    
    
    wav_data=detl1(e:f);
    figure
    findpeaks(wav_data,'MinPeakDistance',dis,'MinPeakHeight',3*k*baseline);
    title('Wavelet domain interictal spike data selecting ')
    fprintf('Please check the corresponding point in both time and wavelet domain.\n');
    [pks,locs] = findpeaks(wav_data,'MinPeakDistance',dis,'MinPeakHeight',3*k*baseline);
    
    fprintf('The spike number is %d.\n',length(pks));
    
    figure
    pspectrum(w,'spectrogram');
    colormap jet;
    ylim([0 0.3]);
    caxis([-60 -25]);
end
fprintf('This program has been finished.\nHave a nice day!\n');

% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
fprintf('Please select two images.\n');
[file1,rep1]=uigetfile(['*.*']);%select file 
i1=imread([rep1,file1]);
figure
imshow(i1);
[file2,rep2]=uigetfile(['*.*']);%select file 
i2=imread([rep2,file2]);
figure
imshow(i2);

prompt1 = {'Please choose whether you need autothreshold.Y/[N]. '};
dlgtitle = 'Input';
dims = [1 35];
definput = {'N'};
answer = inputdlg(prompt1,dlgtitle,dims,definput);
str=answer{1};

if str=='Y'
    level1= graythresh(i1);
    BW1 = imbinarize(i1,level1);
    figure
    imshow(BW1);
    all1=sum(BW1(:))
    
    level2= graythresh(i2);
    BW2 = imbinarize(i2,level2);
    figure
    imshow(BW2);
    all2=sum(BW2(:))
    
    k=logical(logical(BW1+BW2)-logical(BW1-BW2));
    figure
    imshow(k);
    all3=sum(k(:))
    
    rate1=all3/all1
    
    rate2=all3/all2

end

if str=='N'
    
    fprintf('The target protein should be 1.\n');
    k=logical(logical(i1+i2)-logical(i1-i2));
    figure
    imshow(k);
    
    all1=sum(i1(:))
    all2=sum(i2(:))
    all3=sum(k(:))
    
    rate1=all3/all1
    
    rate2=all3/all2

end
fprintf('This program has been finished.\nHave a nice day!\n');

% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
fprintf('Please input the raw images.\n');
[file,path]=uigetfile(['*.*']);%select file
d = dir([path,'*.tiff']);
len=length(d);
if len<1
    d= dir([path,'*.tif']);
end
mkdir LSCI_initial
outfile='LSCI_initial/';%save path

prompt1 = {'Please set the type of LSCI analysis.(0 for Spatial Speckle Contrast. 1 for Temporal Speckle Contrast.)'};
dlgtitle = 'Input';
dims = [1 40];
definput = {'0'};
answer1 = inputdlg(prompt1,dlgtitle,dims,definput);
str=str2num(answer1{1});

if str==0
    prompt1 = {'Please set the length of window'};
    dlgtitle = 'Input';
    dims = [1 35];
    definput = {'5'};
    answer1 = inputdlg(prompt1,dlgtitle,dims,definput);
    win_len=str2num(answer1{1});
    
    F=length(d);%number of frame
    nameCell = cell(length(d),1);
    for i = 1:length(d)
        disp(d(i).name)
        nameCell{i} = d(i).name;
    end
    d2 = sort_nat(nameCell);
    
    for i=1:F
        loadpath{i} =strcat(path,d2(i));
    end
    s = string(loadpath);
    for i= 1:F
        temp = imread(s{i});
        I1(:,:,i) = temp;
    end
    a=size(temp,1);
    b=size(temp,2);
    
    tic
    parfor q=1:F
        I2=double(I1(:,:,q));
        k2=zeros(a,b);
        for m=fix(win_len/2)+1:a-fix(win_len/2)
            for n=fix(win_len/2)+1:b-fix(win_len/2)
                k2(m,n)=std2(I2(m-2:m+2,n-2:n+2))/mean2(I2(m-2:m+2,n-2:n+2));
            end
        end
        v2=1./k2./k2;
        imwrite(uint16(v2.*50),[outfile,num2str(q,'%d'),'.tif']);
    end
    toc
end

if str==1
    prompt = {'Please input the gap','Please input the length of window'};
    dlgtitle = 'Input';
    dims = [1 35];
    definput = {'10','10'};
    ans = inputdlg(prompt,dlgtitle,dims,definput);
    gap=str2num(ans{1});
    len_win=str2num(ans{2});
    
    F=length(d);%number of frame
    nameCell = cell(length(d),1);
    for i = 1:length(d)
        disp(d(i).name)
        nameCell{i} = d(i).name;
    end
    d2 = sort_nat(nameCell);
    
    
    for i=1:F
        loadpath{i} =strcat(path,d2(i));
    end
    s = string(loadpath);
    for i= 1:F
        temp = imread(s{i});
        I1(:,:,i) = temp;
    end
    
    a=size(temp,1);
    b=size(temp,2);
    num=0;
    tic;
    for q=1:gap:F-len_win
        num=num+1;
        t=1;
        for i=q:q+len_win
            I2(:,:,t)=double(I1(:,:,i));
            t=t+1;
        end
        for m=1:a
            for n=1:b
                k1(m,n)=std(I2(m,n,:))/mean(I2(m,n,:));
            end
        end
        
        temp = 1./k1./k1;
        imwrite(uint16(temp.*50),[outfile,num2str(num,'%d'),'.tif']);
    end
    toc;
end
fprintf('This program has been finished.\nHave a nice day!\n');

% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[file,path]=uigetfile(['*.*']);%select file 
di = dir([path,'*.tif']);
for k= 1:length(di)
    I(:,:,k) = imread([path,di(k).name]);
end

a=size(I(:,:,1),1);
b=size(I(:,:,1),2);

for m=1:a
    for n=1:b
        k1(m,n)=mean(I(m,n,:));
    end
end
imwrite(uint16(k1),'mean.tif');
fprintf('This program has been finished.\nHave a nice day!\n');


% --- Creates and returns a handle to the GUI figure. 
function h1 = program_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 6, ...
    'pushbutton', 10, ...
    'axes', 6, ...
    'checkbox', 2, ...
    'popupmenu', 3), ...
    'override', 1, ...
    'release', [], ...
    'resize', 'simple', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'D:\final designment\matlab\program_export.m', ...
    'lastFilename', 'D:\final designment\matlab\program.fig');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'PaperUnits','inches',...
'Units','characters',...
'Position',[135.8 52.0769230769231 112 32.3076923076923],...
'PositionMode',get(0,'defaultfigurePositionMode'),...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','off',...
'Colormap',get(0,'defaultfigureColormap'),...
'MenuBar','none',...
'Name','program',...
'NumberTitle','off',...
'HandleVisibility','callback',...
'Tag','figure1',...
'Resize',get(0,'defaultfigureResize'),...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[8.5 11],...
'PaperSizeMode',get(0,'defaultfigurePaperSizeMode'),...
'PaperType','usletter',...
'PaperTypeMode',get(0,'defaultfigurePaperTypeMode'),...
'PaperUnitsMode',get(0,'defaultfigurePaperUnitsMode'),...
'ScreenPixelsPerInchMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes5';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units',get(0,'defaultaxesUnits'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'PlotBoxAspectRatio',[1 0.651764705882353 0.651764705882353],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'Colormap',[0.2422 0.1504 0.6603;0.250390476190476 0.164995238095238 0.707614285714286;0.257771428571429 0.181780952380952 0.751138095238095;0.264728571428571 0.197757142857143 0.795214285714286;0.270647619047619 0.21467619047619 0.836371428571429;0.275114285714286 0.234238095238095 0.870985714285714;0.2783 0.255871428571429 0.899071428571429;0.280333333333333 0.278233333333333 0.9221;0.281338095238095 0.300595238095238 0.941376190476191;0.281014285714286 0.322757142857143 0.957885714285714;0.279466666666667 0.344671428571429 0.971676190476191;0.275971428571429 0.366680952380952 0.982904761904762;0.269914285714286 0.3892 0.9906;0.260242857142857 0.412328571428571 0.995157142857143;0.244033333333333 0.435833333333333 0.998833333333333;0.220642857142857 0.460257142857143 0.997285714285714;0.196333333333333 0.484719047619048 0.989152380952381;0.183404761904762 0.507371428571429 0.979795238095238;0.178642857142857 0.528857142857143 0.968157142857143;0.176438095238095 0.549904761904762 0.952019047619048;0.168742857142857 0.570261904761905 0.935871428571428;0.154 0.5902 0.9218;0.146028571428571 0.609119047619048 0.907857142857143;0.13802380952381 0.627628571428572 0.897290476190476;0.124814285714286 0.645928571428571 0.888342857142857;0.111252380952381 0.6635 0.876314285714286;0.0952095238095238 0.679828571428571 0.859780952380952;0.0688714285714285 0.694771428571429 0.839357142857143;0.0296666666666667 0.708166666666667 0.816333333333333;0.00357142857142857 0.720266666666667 0.7917;0.00665714285714287 0.731214285714286 0.766014285714286;0.0433285714285715 0.741095238095238 0.739409523809524;0.096395238095238 0.75 0.712038095238095;0.140771428571429 0.7584 0.684157142857143;0.1717 0.766961904761905 0.655442857142857;0.193766666666667 0.775766666666667 0.6251;0.216085714285714 0.7843 0.5923;0.246957142857143 0.791795238095238 0.556742857142857;0.290614285714286 0.797290476190476 0.518828571428572;0.340642857142857 0.8008 0.478857142857143;0.3909 0.802871428571428 0.435447619047619;0.445628571428572 0.802419047619048 0.390919047619048;0.5044 0.7993 0.348;0.561561904761905 0.794233333333333 0.304480952380953;0.617395238095238 0.787619047619048 0.261238095238095;0.671985714285714 0.779271428571429 0.2227;0.7242 0.769842857142857 0.191028571428571;0.773833333333333 0.759804761904762 0.164609523809524;0.820314285714286 0.749814285714286 0.153528571428571;0.863433333333333 0.7406 0.159633333333333;0.903542857142857 0.733028571428571 0.177414285714286;0.939257142857143 0.728785714285714 0.209957142857143;0.972757142857143 0.729771428571429 0.239442857142857;0.995647619047619 0.743371428571429 0.237147619047619;0.996985714285714 0.765857142857143 0.219942857142857;0.995204761904762 0.789252380952381 0.202761904761905;0.9892 0.813566666666667 0.188533333333333;0.978628571428571 0.838628571428572 0.176557142857143;0.967647619047619 0.8639 0.164290476190476;0.961009523809524 0.889019047619048 0.153676190476191;0.959671428571429 0.913457142857143 0.142257142857143;0.962795238095238 0.937338095238095 0.126509523809524;0.969114285714286 0.960628571428571 0.106361904761905;0.9769 0.9839 0.0805],...
'ColormapMode',get(0,'defaultaxesColormapMode'),...
'Alphamap',[0 0.0159 0.0317 0.0476 0.0635 0.0794 0.0952 0.1111 0.127 0.1429 0.1587 0.1746 0.1905 0.2063 0.2222 0.2381 0.254 0.2698 0.2857 0.3016 0.3175 0.3333 0.3492 0.3651 0.381 0.3968 0.4127 0.4286 0.4444 0.4603 0.4762 0.4921 0.5079 0.5238 0.5397 0.5556 0.5714 0.5873 0.6032 0.619 0.6349 0.6508 0.6667 0.6825 0.6984 0.7143 0.7302 0.746 0.7619 0.7778 0.7937 0.8095 0.8254 0.8413 0.8571 0.873 0.8889 0.9048 0.9206 0.9365 0.9524 0.9683 0.9841 1],...
'AlphamapMode',get(0,'defaultaxesAlphamapMode'),...
'XTick',[0 0.2 0.4 0.6 0.8 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'YTick',[0 0.2 0.4 0.6 0.8 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XRulerMode',get(0,'defaultaxesXRulerMode'),...
'YRulerMode',get(0,'defaultaxesYRulerMode'),...
'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'Position',[0.225765306122449 0.338487972508591 0.542091836734694 0.475945017182131],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[0.169471233787828 0.166428367171862 0.123844363152644 0.113473886708087],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'Tag','axes5',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000876258401 1.00992779783394 0.500000000000007],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.105896512036146 7.105427357601e-15],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.0839215699738147 0.500000476837158 7.105427357601e-15],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto');

appdata = [];
appdata.lastValidTag = 'pushbutton1';

h7 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Analyse Two Images',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.669642857142857 0.159920634920635 0.284438775510204 0.0928571428571428],...
'Callback',@(hObject,eventdata)program_export('pushbutton1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','pushbutton1');

appdata = [];
appdata.lastValidTag = 'text4';

h8 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Analysis Tool Box',...
'Style','text',...
'Position',[0.100765306122449 0.868386243386243 0.790816326530612 0.0601851851851851],...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Tag','text4',...
'FontSize',16,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text5';

h9 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Created by Xianghan Kong',...
'Style','text',...
'Position',[0.794642857142857 -0.00171957671957672 0.204081632653061 0.0326719576719577],...
'Children',[],...
'Tag','text5',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton5';

h10 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Power Spectrum',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.0408163265306122 0.0533068783068783 0.285714285714286 0.0928571428571428],...
'Callback',@(hObject,eventdata)program_export('pushbutton5_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton5',...
'KeyPressFcn',@(hObject,eventdata)program_export('pushbutton5_KeyPressFcn',hObject,eventdata,guidata(hObject)),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton6';

h11 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Epileptic EEG Analysis',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.354591836734694 0.055026455026455 0.288265306122449 0.0911375661375661],...
'Callback',@(hObject,eventdata)program_export('pushbutton6_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton6',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton7';

h12 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Protein Overlap Rate',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.669642857142857 0.0567460317460317 0.284438775510204 0.0876984126984127],...
'Callback',@(hObject,eventdata)program_export('pushbutton7_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton7',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton8';

h13 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','LSCI_initial',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.0395408163265306 0.159920634920635 0.288265306122449 0.0911375661375661],...
'Callback',@(hObject,eventdata)program_export('pushbutton8_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton8',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton9';

h14 = uicontrol(...
'Parent',h1,...
'Units','normalized',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Images_mean',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.354591836734694 0.159920634920635 0.288265306122449 0.0911375661375661],...
'Callback',@(hObject,eventdata)program_export('pushbutton9_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton9',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % PROGRAM_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % PROGRAM_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % PROGRAM_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % PROGRAM_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI MATLAB code file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


